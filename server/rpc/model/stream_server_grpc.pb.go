// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: proto/streamserver/stream_server.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StreamServer_Register_FullMethodName   = "/streamserver.StreamServer/Register"
	StreamServer_Unregister_FullMethodName = "/streamserver.StreamServer/Unregister"
	StreamServer_KeepAlive_FullMethodName  = "/streamserver.StreamServer/KeepAlive"
)

// StreamServerClient is the client API for StreamServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StreamServerClient interface {
	Register(ctx context.Context, in *StreamServerRegisterRequest, opts ...grpc.CallOption) (*StreamServerRegisterResponse, error)
	Unregister(ctx context.Context, in *StreamServerRegisterRequest, opts ...grpc.CallOption) (*StreamServerRegisterResponse, error)
	KeepAlive(ctx context.Context, in *StreamServerKeepAliveRequest, opts ...grpc.CallOption) (*StreamServerKeepAliveResponse, error)
}

type streamServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamServerClient(cc grpc.ClientConnInterface) StreamServerClient {
	return &streamServerClient{cc}
}

func (c *streamServerClient) Register(ctx context.Context, in *StreamServerRegisterRequest, opts ...grpc.CallOption) (*StreamServerRegisterResponse, error) {
	out := new(StreamServerRegisterResponse)
	err := c.cc.Invoke(ctx, StreamServer_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) Unregister(ctx context.Context, in *StreamServerRegisterRequest, opts ...grpc.CallOption) (*StreamServerRegisterResponse, error) {
	out := new(StreamServerRegisterResponse)
	err := c.cc.Invoke(ctx, StreamServer_Unregister_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamServerClient) KeepAlive(ctx context.Context, in *StreamServerKeepAliveRequest, opts ...grpc.CallOption) (*StreamServerKeepAliveResponse, error) {
	out := new(StreamServerKeepAliveResponse)
	err := c.cc.Invoke(ctx, StreamServer_KeepAlive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamServerServer is the server API for StreamServer service.
// All implementations must embed UnimplementedStreamServerServer
// for forward compatibility
type StreamServerServer interface {
	Register(context.Context, *StreamServerRegisterRequest) (*StreamServerRegisterResponse, error)
	Unregister(context.Context, *StreamServerRegisterRequest) (*StreamServerRegisterResponse, error)
	KeepAlive(context.Context, *StreamServerKeepAliveRequest) (*StreamServerKeepAliveResponse, error)
	mustEmbedUnimplementedStreamServerServer()
}

// UnimplementedStreamServerServer must be embedded to have forward compatible implementations.
type UnimplementedStreamServerServer struct {
}

func (UnimplementedStreamServerServer) Register(context.Context, *StreamServerRegisterRequest) (*StreamServerRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedStreamServerServer) Unregister(context.Context, *StreamServerRegisterRequest) (*StreamServerRegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unregister not implemented")
}
func (UnimplementedStreamServerServer) KeepAlive(context.Context, *StreamServerKeepAliveRequest) (*StreamServerKeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedStreamServerServer) mustEmbedUnimplementedStreamServerServer() {}

// UnsafeStreamServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamServerServer will
// result in compilation errors.
type UnsafeStreamServerServer interface {
	mustEmbedUnimplementedStreamServerServer()
}

func RegisterStreamServerServer(s grpc.ServiceRegistrar, srv StreamServerServer) {
	s.RegisterService(&StreamServer_ServiceDesc, srv)
}

func _StreamServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamServerRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamServer_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).Register(ctx, req.(*StreamServerRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_Unregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamServerRegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).Unregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamServer_Unregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).Unregister(ctx, req.(*StreamServerRegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamServer_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamServerKeepAliveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamServerServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamServer_KeepAlive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamServerServer).KeepAlive(ctx, req.(*StreamServerKeepAliveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamServer_ServiceDesc is the grpc.ServiceDesc for StreamServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "streamserver.StreamServer",
	HandlerType: (*StreamServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _StreamServer_Register_Handler,
		},
		{
			MethodName: "Unregister",
			Handler:    _StreamServer_Unregister_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _StreamServer_KeepAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/streamserver/stream_server.proto",
}
